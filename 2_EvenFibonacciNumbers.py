#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

class Solution(object):
    def fib(self, n):
        """
        :type n: int
        :rtype: int
        """
        # base case
        if n == 0:
            return(0)
        if n == 1:
            return(1)
        # create empty dp array
        dp = [0] * (n + 1)

        # find patterns
        dp[0] = 0
        dp[1] = 1
        
        #print("Pre-generated DP Array = ", dp)
        # dp[2] = dp[1] + dp[0]
        # dp[i] = dp[i-1] + dp[i-2]
        
        for i in range(2,n+1):
            dp[i] = dp[i-1] + dp[i-2]
        
        #print("Generated DP Array after filling = ", dp)
        
        return(dp[n])
        
        
out = Solution().fib(33)
print(out)
#number_str = str(int(1.5640891676957637e+308))
#print(number_str)
